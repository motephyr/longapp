// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Events", testEvents)
	t.Run("Groups", testGroups)
	t.Run("Olders", testOlders)
	t.Run("Sources", testSources)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Events", testEventsDelete)
	t.Run("Groups", testGroupsDelete)
	t.Run("Olders", testOldersDelete)
	t.Run("Sources", testSourcesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Events", testEventsQueryDeleteAll)
	t.Run("Groups", testGroupsQueryDeleteAll)
	t.Run("Olders", testOldersQueryDeleteAll)
	t.Run("Sources", testSourcesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Events", testEventsSliceDeleteAll)
	t.Run("Groups", testGroupsSliceDeleteAll)
	t.Run("Olders", testOldersSliceDeleteAll)
	t.Run("Sources", testSourcesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Events", testEventsExists)
	t.Run("Groups", testGroupsExists)
	t.Run("Olders", testOldersExists)
	t.Run("Sources", testSourcesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Events", testEventsFind)
	t.Run("Groups", testGroupsFind)
	t.Run("Olders", testOldersFind)
	t.Run("Sources", testSourcesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Events", testEventsBind)
	t.Run("Groups", testGroupsBind)
	t.Run("Olders", testOldersBind)
	t.Run("Sources", testSourcesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Events", testEventsOne)
	t.Run("Groups", testGroupsOne)
	t.Run("Olders", testOldersOne)
	t.Run("Sources", testSourcesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Events", testEventsAll)
	t.Run("Groups", testGroupsAll)
	t.Run("Olders", testOldersAll)
	t.Run("Sources", testSourcesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Events", testEventsCount)
	t.Run("Groups", testGroupsCount)
	t.Run("Olders", testOldersCount)
	t.Run("Sources", testSourcesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Events", testEventsHooks)
	t.Run("Groups", testGroupsHooks)
	t.Run("Olders", testOldersHooks)
	t.Run("Sources", testSourcesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Events", testEventsInsert)
	t.Run("Events", testEventsInsertWhitelist)
	t.Run("Groups", testGroupsInsert)
	t.Run("Groups", testGroupsInsertWhitelist)
	t.Run("Olders", testOldersInsert)
	t.Run("Olders", testOldersInsertWhitelist)
	t.Run("Sources", testSourcesInsert)
	t.Run("Sources", testSourcesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("GroupToOlderUsingOlder", testGroupToOneOlderUsingOlder)
	t.Run("SourceToGroupUsingGroup", testSourceToOneGroupUsingGroup)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GroupToSources", testGroupToManySources)
	t.Run("OlderToGroups", testOlderToManyGroups)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("GroupToOlderUsingGroups", testGroupToOneSetOpOlderUsingOlder)
	t.Run("SourceToGroupUsingSources", testSourceToOneSetOpGroupUsingGroup)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("GroupToOlderUsingGroups", testGroupToOneRemoveOpOlderUsingOlder)
	t.Run("SourceToGroupUsingSources", testSourceToOneRemoveOpGroupUsingGroup)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GroupToSources", testGroupToManyAddOpSources)
	t.Run("OlderToGroups", testOlderToManyAddOpGroups)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("GroupToSources", testGroupToManySetOpSources)
	t.Run("OlderToGroups", testOlderToManySetOpGroups)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("GroupToSources", testGroupToManyRemoveOpSources)
	t.Run("OlderToGroups", testOlderToManyRemoveOpGroups)
}

func TestReload(t *testing.T) {
	t.Run("Events", testEventsReload)
	t.Run("Groups", testGroupsReload)
	t.Run("Olders", testOldersReload)
	t.Run("Sources", testSourcesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Events", testEventsReloadAll)
	t.Run("Groups", testGroupsReloadAll)
	t.Run("Olders", testOldersReloadAll)
	t.Run("Sources", testSourcesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Events", testEventsSelect)
	t.Run("Groups", testGroupsSelect)
	t.Run("Olders", testOldersSelect)
	t.Run("Sources", testSourcesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Events", testEventsUpdate)
	t.Run("Groups", testGroupsUpdate)
	t.Run("Olders", testOldersUpdate)
	t.Run("Sources", testSourcesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Events", testEventsSliceUpdateAll)
	t.Run("Groups", testGroupsSliceUpdateAll)
	t.Run("Olders", testOldersSliceUpdateAll)
	t.Run("Sources", testSourcesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
