// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Older is an object representing the database table.
type Older struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Room          null.String `boil:"room" json:"room,omitempty" toml:"room" yaml:"room,omitempty"`
	Birthday      null.String `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`
	Medicalrecord null.String `boil:"medicalrecord" json:"medicalrecord,omitempty" toml:"medicalrecord" yaml:"medicalrecord,omitempty"`
	Medicine      null.String `boil:"medicine" json:"medicine,omitempty" toml:"medicine" yaml:"medicine,omitempty"`
	Notice        null.String `boil:"notice" json:"notice,omitempty" toml:"notice" yaml:"notice,omitempty"`
	Pictureurl    null.String `boil:"pictureurl" json:"pictureurl,omitempty" toml:"pictureurl" yaml:"pictureurl,omitempty"`
	CreatedAt     null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *olderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L olderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OlderColumns = struct {
	ID            string
	Name          string
	Room          string
	Birthday      string
	Medicalrecord string
	Medicine      string
	Notice        string
	Pictureurl    string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Name:          "name",
	Room:          "room",
	Birthday:      "birthday",
	Medicalrecord: "medicalrecord",
	Medicine:      "medicine",
	Notice:        "notice",
	Pictureurl:    "pictureurl",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var OlderTableColumns = struct {
	ID            string
	Name          string
	Room          string
	Birthday      string
	Medicalrecord string
	Medicine      string
	Notice        string
	Pictureurl    string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "olders.id",
	Name:          "olders.name",
	Room:          "olders.room",
	Birthday:      "olders.birthday",
	Medicalrecord: "olders.medicalrecord",
	Medicine:      "olders.medicine",
	Notice:        "olders.notice",
	Pictureurl:    "olders.pictureurl",
	CreatedAt:     "olders.created_at",
	UpdatedAt:     "olders.updated_at",
}

// Generated where

var OlderWhere = struct {
	ID            whereHelperint
	Name          whereHelpernull_String
	Room          whereHelpernull_String
	Birthday      whereHelpernull_String
	Medicalrecord whereHelpernull_String
	Medicine      whereHelpernull_String
	Notice        whereHelpernull_String
	Pictureurl    whereHelpernull_String
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
}{
	ID:            whereHelperint{field: "\"olders\".\"id\""},
	Name:          whereHelpernull_String{field: "\"olders\".\"name\""},
	Room:          whereHelpernull_String{field: "\"olders\".\"room\""},
	Birthday:      whereHelpernull_String{field: "\"olders\".\"birthday\""},
	Medicalrecord: whereHelpernull_String{field: "\"olders\".\"medicalrecord\""},
	Medicine:      whereHelpernull_String{field: "\"olders\".\"medicine\""},
	Notice:        whereHelpernull_String{field: "\"olders\".\"notice\""},
	Pictureurl:    whereHelpernull_String{field: "\"olders\".\"pictureurl\""},
	CreatedAt:     whereHelpernull_Time{field: "\"olders\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"olders\".\"updated_at\""},
}

// OlderRels is where relationship names are stored.
var OlderRels = struct {
	Groups     string
	UserOlders string
}{
	Groups:     "Groups",
	UserOlders: "UserOlders",
}

// olderR is where relationships are stored.
type olderR struct {
	Groups     GroupSlice     `boil:"Groups" json:"Groups" toml:"Groups" yaml:"Groups"`
	UserOlders UserOlderSlice `boil:"UserOlders" json:"UserOlders" toml:"UserOlders" yaml:"UserOlders"`
}

// NewStruct creates a new relationship struct
func (*olderR) NewStruct() *olderR {
	return &olderR{}
}

// olderL is where Load methods for each relationship are stored.
type olderL struct{}

var (
	olderAllColumns            = []string{"id", "name", "room", "birthday", "medicalrecord", "medicine", "notice", "pictureurl", "created_at", "updated_at"}
	olderColumnsWithoutDefault = []string{}
	olderColumnsWithDefault    = []string{"id", "name", "room", "birthday", "medicalrecord", "medicine", "notice", "pictureurl", "created_at", "updated_at"}
	olderPrimaryKeyColumns     = []string{"id"}
	olderGeneratedColumns      = []string{}
)

type (
	// OlderSlice is an alias for a slice of pointers to Older.
	// This should almost always be used instead of []Older.
	OlderSlice []*Older
	// OlderHook is the signature for custom Older hook methods
	OlderHook func(boil.Executor, *Older) error

	olderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	olderType                 = reflect.TypeOf(&Older{})
	olderMapping              = queries.MakeStructMapping(olderType)
	olderPrimaryKeyMapping, _ = queries.BindMapping(olderType, olderMapping, olderPrimaryKeyColumns)
	olderInsertCacheMut       sync.RWMutex
	olderInsertCache          = make(map[string]insertCache)
	olderUpdateCacheMut       sync.RWMutex
	olderUpdateCache          = make(map[string]updateCache)
	olderUpsertCacheMut       sync.RWMutex
	olderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var olderAfterSelectHooks []OlderHook

var olderBeforeInsertHooks []OlderHook
var olderAfterInsertHooks []OlderHook

var olderBeforeUpdateHooks []OlderHook
var olderAfterUpdateHooks []OlderHook

var olderBeforeDeleteHooks []OlderHook
var olderAfterDeleteHooks []OlderHook

var olderBeforeUpsertHooks []OlderHook
var olderAfterUpsertHooks []OlderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Older) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range olderAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Older) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range olderBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Older) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range olderAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Older) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range olderBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Older) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range olderAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Older) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range olderBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Older) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range olderAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Older) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range olderBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Older) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range olderAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOlderHook registers your hook function for all future operations.
func AddOlderHook(hookPoint boil.HookPoint, olderHook OlderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		olderAfterSelectHooks = append(olderAfterSelectHooks, olderHook)
	case boil.BeforeInsertHook:
		olderBeforeInsertHooks = append(olderBeforeInsertHooks, olderHook)
	case boil.AfterInsertHook:
		olderAfterInsertHooks = append(olderAfterInsertHooks, olderHook)
	case boil.BeforeUpdateHook:
		olderBeforeUpdateHooks = append(olderBeforeUpdateHooks, olderHook)
	case boil.AfterUpdateHook:
		olderAfterUpdateHooks = append(olderAfterUpdateHooks, olderHook)
	case boil.BeforeDeleteHook:
		olderBeforeDeleteHooks = append(olderBeforeDeleteHooks, olderHook)
	case boil.AfterDeleteHook:
		olderAfterDeleteHooks = append(olderAfterDeleteHooks, olderHook)
	case boil.BeforeUpsertHook:
		olderBeforeUpsertHooks = append(olderBeforeUpsertHooks, olderHook)
	case boil.AfterUpsertHook:
		olderAfterUpsertHooks = append(olderAfterUpsertHooks, olderHook)
	}
}

// OneG returns a single older record from the query using the global executor.
func (q olderQuery) OneG() (*Older, error) {
	return q.One(boil.GetDB())
}

// One returns a single older record from the query.
func (q olderQuery) One(exec boil.Executor) (*Older, error) {
	o := &Older{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for olders")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Older records from the query using the global executor.
func (q olderQuery) AllG() (OlderSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Older records from the query.
func (q olderQuery) All(exec boil.Executor) (OlderSlice, error) {
	var o []*Older

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Older slice")
	}

	if len(olderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Older records in the query, and panics on error.
func (q olderQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Older records in the query.
func (q olderQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count olders rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q olderQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q olderQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if olders exists")
	}

	return count > 0, nil
}

// Groups retrieves all the group's Groups with an executor.
func (o *Older) Groups(mods ...qm.QueryMod) groupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"groups\".\"older_id\"=?", o.ID),
	)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"groups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"groups\".*"})
	}

	return query
}

// UserOlders retrieves all the user_older's UserOlders with an executor.
func (o *Older) UserOlders(mods ...qm.QueryMod) userOlderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_olders\".\"older_id\"=?", o.ID),
	)

	query := UserOlders(queryMods...)
	queries.SetFrom(query.Query, "\"user_olders\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_olders\".*"})
	}

	return query
}

// LoadGroups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (olderL) LoadGroups(e boil.Executor, singular bool, maybeOlder interface{}, mods queries.Applicator) error {
	var slice []*Older
	var object *Older

	if singular {
		object = maybeOlder.(*Older)
	} else {
		slice = *maybeOlder.(*[]*Older)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &olderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &olderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.older_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load groups")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice groups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(groupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Groups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupR{}
			}
			foreign.R.Older = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OlderID) {
				local.R.Groups = append(local.R.Groups, foreign)
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Older = local
				break
			}
		}
	}

	return nil
}

// LoadUserOlders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (olderL) LoadUserOlders(e boil.Executor, singular bool, maybeOlder interface{}, mods queries.Applicator) error {
	var slice []*Older
	var object *Older

	if singular {
		object = maybeOlder.(*Older)
	} else {
		slice = *maybeOlder.(*[]*Older)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &olderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &olderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_olders`),
		qm.WhereIn(`user_olders.older_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_olders")
	}

	var resultSlice []*UserOlder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_olders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_olders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_olders")
	}

	if len(userOlderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserOlders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOlderR{}
			}
			foreign.R.Older = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OlderID) {
				local.R.UserOlders = append(local.R.UserOlders, foreign)
				if foreign.R == nil {
					foreign.R = &userOlderR{}
				}
				foreign.R.Older = local
				break
			}
		}
	}

	return nil
}

// AddGroupsG adds the given related objects to the existing relationships
// of the older, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Older appropriately.
// Uses the global database handle.
func (o *Older) AddGroupsG(insert bool, related ...*Group) error {
	return o.AddGroups(boil.GetDB(), insert, related...)
}

// AddGroups adds the given related objects to the existing relationships
// of the older, optionally inserting them as new records.
// Appends related to o.R.Groups.
// Sets related.R.Older appropriately.
func (o *Older) AddGroups(exec boil.Executor, insert bool, related ...*Group) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OlderID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"groups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"older_id"}),
				strmangle.WhereClause("\"", "\"", 2, groupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OlderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &olderR{
			Groups: related,
		}
	} else {
		o.R.Groups = append(o.R.Groups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupR{
				Older: o,
			}
		} else {
			rel.R.Older = o
		}
	}
	return nil
}

// SetGroupsG removes all previously related items of the
// older replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Older's Groups accordingly.
// Replaces o.R.Groups with related.
// Sets related.R.Older's Groups accordingly.
// Uses the global database handle.
func (o *Older) SetGroupsG(insert bool, related ...*Group) error {
	return o.SetGroups(boil.GetDB(), insert, related...)
}

// SetGroups removes all previously related items of the
// older replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Older's Groups accordingly.
// Replaces o.R.Groups with related.
// Sets related.R.Older's Groups accordingly.
func (o *Older) SetGroups(exec boil.Executor, insert bool, related ...*Group) error {
	query := "update \"groups\" set \"older_id\" = null where \"older_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Groups {
			queries.SetScanner(&rel.OlderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Older = nil
		}

		o.R.Groups = nil
	}
	return o.AddGroups(exec, insert, related...)
}

// RemoveGroupsG relationships from objects passed in.
// Removes related items from R.Groups (uses pointer comparison, removal does not keep order)
// Sets related.R.Older.
// Uses the global database handle.
func (o *Older) RemoveGroupsG(related ...*Group) error {
	return o.RemoveGroups(boil.GetDB(), related...)
}

// RemoveGroups relationships from objects passed in.
// Removes related items from R.Groups (uses pointer comparison, removal does not keep order)
// Sets related.R.Older.
func (o *Older) RemoveGroups(exec boil.Executor, related ...*Group) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OlderID, nil)
		if rel.R != nil {
			rel.R.Older = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("older_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Groups {
			if rel != ri {
				continue
			}

			ln := len(o.R.Groups)
			if ln > 1 && i < ln-1 {
				o.R.Groups[i] = o.R.Groups[ln-1]
			}
			o.R.Groups = o.R.Groups[:ln-1]
			break
		}
	}

	return nil
}

// AddUserOldersG adds the given related objects to the existing relationships
// of the older, optionally inserting them as new records.
// Appends related to o.R.UserOlders.
// Sets related.R.Older appropriately.
// Uses the global database handle.
func (o *Older) AddUserOldersG(insert bool, related ...*UserOlder) error {
	return o.AddUserOlders(boil.GetDB(), insert, related...)
}

// AddUserOlders adds the given related objects to the existing relationships
// of the older, optionally inserting them as new records.
// Appends related to o.R.UserOlders.
// Sets related.R.Older appropriately.
func (o *Older) AddUserOlders(exec boil.Executor, insert bool, related ...*UserOlder) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OlderID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_olders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"older_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOlderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OlderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &olderR{
			UserOlders: related,
		}
	} else {
		o.R.UserOlders = append(o.R.UserOlders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOlderR{
				Older: o,
			}
		} else {
			rel.R.Older = o
		}
	}
	return nil
}

// SetUserOldersG removes all previously related items of the
// older replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Older's UserOlders accordingly.
// Replaces o.R.UserOlders with related.
// Sets related.R.Older's UserOlders accordingly.
// Uses the global database handle.
func (o *Older) SetUserOldersG(insert bool, related ...*UserOlder) error {
	return o.SetUserOlders(boil.GetDB(), insert, related...)
}

// SetUserOlders removes all previously related items of the
// older replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Older's UserOlders accordingly.
// Replaces o.R.UserOlders with related.
// Sets related.R.Older's UserOlders accordingly.
func (o *Older) SetUserOlders(exec boil.Executor, insert bool, related ...*UserOlder) error {
	query := "update \"user_olders\" set \"older_id\" = null where \"older_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UserOlders {
			queries.SetScanner(&rel.OlderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Older = nil
		}

		o.R.UserOlders = nil
	}
	return o.AddUserOlders(exec, insert, related...)
}

// RemoveUserOldersG relationships from objects passed in.
// Removes related items from R.UserOlders (uses pointer comparison, removal does not keep order)
// Sets related.R.Older.
// Uses the global database handle.
func (o *Older) RemoveUserOldersG(related ...*UserOlder) error {
	return o.RemoveUserOlders(boil.GetDB(), related...)
}

// RemoveUserOlders relationships from objects passed in.
// Removes related items from R.UserOlders (uses pointer comparison, removal does not keep order)
// Sets related.R.Older.
func (o *Older) RemoveUserOlders(exec boil.Executor, related ...*UserOlder) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OlderID, nil)
		if rel.R != nil {
			rel.R.Older = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("older_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UserOlders {
			if rel != ri {
				continue
			}

			ln := len(o.R.UserOlders)
			if ln > 1 && i < ln-1 {
				o.R.UserOlders[i] = o.R.UserOlders[ln-1]
			}
			o.R.UserOlders = o.R.UserOlders[:ln-1]
			break
		}
	}

	return nil
}

// Olders retrieves all the records using an executor.
func Olders(mods ...qm.QueryMod) olderQuery {
	mods = append(mods, qm.From("\"olders\""))
	return olderQuery{NewQuery(mods...)}
}

// FindOlderG retrieves a single record by ID.
func FindOlderG(iD int, selectCols ...string) (*Older, error) {
	return FindOlder(boil.GetDB(), iD, selectCols...)
}

// FindOlder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOlder(exec boil.Executor, iD int, selectCols ...string) (*Older, error) {
	olderObj := &Older{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"olders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, olderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from olders")
	}

	if err = olderObj.doAfterSelectHooks(exec); err != nil {
		return olderObj, err
	}

	return olderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Older) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Older) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no olders provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(olderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	olderInsertCacheMut.RLock()
	cache, cached := olderInsertCache[key]
	olderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			olderAllColumns,
			olderColumnsWithDefault,
			olderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(olderType, olderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(olderType, olderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"olders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"olders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into olders")
	}

	if !cached {
		olderInsertCacheMut.Lock()
		olderInsertCache[key] = cache
		olderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Older record using the global executor.
// See Update for more documentation.
func (o *Older) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Older.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Older) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	olderUpdateCacheMut.RLock()
	cache, cached := olderUpdateCache[key]
	olderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			olderAllColumns,
			olderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update olders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"olders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, olderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(olderType, olderMapping, append(wl, olderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update olders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for olders")
	}

	if !cached {
		olderUpdateCacheMut.Lock()
		olderUpdateCache[key] = cache
		olderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q olderQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q olderQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for olders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for olders")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OlderSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OlderSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), olderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"olders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, olderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in older slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all older")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Older) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Older) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no olders provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(olderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	olderUpsertCacheMut.RLock()
	cache, cached := olderUpsertCache[key]
	olderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			olderAllColumns,
			olderColumnsWithDefault,
			olderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			olderAllColumns,
			olderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert olders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(olderPrimaryKeyColumns))
			copy(conflict, olderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"olders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(olderType, olderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(olderType, olderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert olders")
	}

	if !cached {
		olderUpsertCacheMut.Lock()
		olderUpsertCache[key] = cache
		olderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Older record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Older) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Older record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Older) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Older provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), olderPrimaryKeyMapping)
	sql := "DELETE FROM \"olders\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from olders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for olders")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q olderQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q olderQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no olderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from olders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for olders")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OlderSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OlderSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(olderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), olderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"olders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, olderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from older slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for olders")
	}

	if len(olderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Older) ReloadG() error {
	if o == nil {
		return errors.New("models: no Older provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Older) Reload(exec boil.Executor) error {
	ret, err := FindOlder(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OlderSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OlderSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OlderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OlderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), olderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"olders\".* FROM \"olders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, olderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OlderSlice")
	}

	*o = slice

	return nil
}

// OlderExistsG checks if the Older row exists.
func OlderExistsG(iD int) (bool, error) {
	return OlderExists(boil.GetDB(), iD)
}

// OlderExists checks if the Older row exists.
func OlderExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"olders\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if olders exists")
	}

	return exists, nil
}
