// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Source is an object representing the database table.
type Source struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Idstring   null.String `boil:"idstring" json:"idstring,omitempty" toml:"idstring" yaml:"idstring,omitempty"`
	Timestring null.String `boil:"timestring" json:"timestring,omitempty" toml:"timestring" yaml:"timestring,omitempty"`
	Action     null.String `boil:"action" json:"action,omitempty" toml:"action" yaml:"action,omitempty"`
	URL        null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	CreatedAt  null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Datestring null.String `boil:"datestring" json:"datestring,omitempty" toml:"datestring" yaml:"datestring,omitempty"`
	Space      null.String `boil:"space" json:"space,omitempty" toml:"space" yaml:"space,omitempty"`
	GroupID    null.Int    `boil:"group_id" json:"group_id,omitempty" toml:"group_id" yaml:"group_id,omitempty"`

	R *sourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SourceColumns = struct {
	ID         string
	Idstring   string
	Timestring string
	Action     string
	URL        string
	CreatedAt  string
	UpdatedAt  string
	Datestring string
	Space      string
	GroupID    string
}{
	ID:         "id",
	Idstring:   "idstring",
	Timestring: "timestring",
	Action:     "action",
	URL:        "url",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	Datestring: "datestring",
	Space:      "space",
	GroupID:    "group_id",
}

var SourceTableColumns = struct {
	ID         string
	Idstring   string
	Timestring string
	Action     string
	URL        string
	CreatedAt  string
	UpdatedAt  string
	Datestring string
	Space      string
	GroupID    string
}{
	ID:         "sources.id",
	Idstring:   "sources.idstring",
	Timestring: "sources.timestring",
	Action:     "sources.action",
	URL:        "sources.url",
	CreatedAt:  "sources.created_at",
	UpdatedAt:  "sources.updated_at",
	Datestring: "sources.datestring",
	Space:      "sources.space",
	GroupID:    "sources.group_id",
}

// Generated where

var SourceWhere = struct {
	ID         whereHelperint
	Idstring   whereHelpernull_String
	Timestring whereHelpernull_String
	Action     whereHelpernull_String
	URL        whereHelpernull_String
	CreatedAt  whereHelpernull_Time
	UpdatedAt  whereHelpernull_Time
	Datestring whereHelpernull_String
	Space      whereHelpernull_String
	GroupID    whereHelpernull_Int
}{
	ID:         whereHelperint{field: "\"sources\".\"id\""},
	Idstring:   whereHelpernull_String{field: "\"sources\".\"idstring\""},
	Timestring: whereHelpernull_String{field: "\"sources\".\"timestring\""},
	Action:     whereHelpernull_String{field: "\"sources\".\"action\""},
	URL:        whereHelpernull_String{field: "\"sources\".\"url\""},
	CreatedAt:  whereHelpernull_Time{field: "\"sources\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"sources\".\"updated_at\""},
	Datestring: whereHelpernull_String{field: "\"sources\".\"datestring\""},
	Space:      whereHelpernull_String{field: "\"sources\".\"space\""},
	GroupID:    whereHelpernull_Int{field: "\"sources\".\"group_id\""},
}

// SourceRels is where relationship names are stored.
var SourceRels = struct {
	Group string
}{
	Group: "Group",
}

// sourceR is where relationships are stored.
type sourceR struct {
	Group *Group `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
}

// NewStruct creates a new relationship struct
func (*sourceR) NewStruct() *sourceR {
	return &sourceR{}
}

// sourceL is where Load methods for each relationship are stored.
type sourceL struct{}

var (
	sourceAllColumns            = []string{"id", "idstring", "timestring", "action", "url", "created_at", "updated_at", "datestring", "space", "group_id"}
	sourceColumnsWithoutDefault = []string{}
	sourceColumnsWithDefault    = []string{"id", "idstring", "timestring", "action", "url", "created_at", "updated_at", "datestring", "space", "group_id"}
	sourcePrimaryKeyColumns     = []string{"id"}
	sourceGeneratedColumns      = []string{}
)

type (
	// SourceSlice is an alias for a slice of pointers to Source.
	// This should almost always be used instead of []Source.
	SourceSlice []*Source
	// SourceHook is the signature for custom Source hook methods
	SourceHook func(boil.Executor, *Source) error

	sourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sourceType                 = reflect.TypeOf(&Source{})
	sourceMapping              = queries.MakeStructMapping(sourceType)
	sourcePrimaryKeyMapping, _ = queries.BindMapping(sourceType, sourceMapping, sourcePrimaryKeyColumns)
	sourceInsertCacheMut       sync.RWMutex
	sourceInsertCache          = make(map[string]insertCache)
	sourceUpdateCacheMut       sync.RWMutex
	sourceUpdateCache          = make(map[string]updateCache)
	sourceUpsertCacheMut       sync.RWMutex
	sourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sourceAfterSelectHooks []SourceHook

var sourceBeforeInsertHooks []SourceHook
var sourceAfterInsertHooks []SourceHook

var sourceBeforeUpdateHooks []SourceHook
var sourceAfterUpdateHooks []SourceHook

var sourceBeforeDeleteHooks []SourceHook
var sourceAfterDeleteHooks []SourceHook

var sourceBeforeUpsertHooks []SourceHook
var sourceAfterUpsertHooks []SourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Source) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Source) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Source) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Source) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Source) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Source) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Source) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Source) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Source) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range sourceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSourceHook registers your hook function for all future operations.
func AddSourceHook(hookPoint boil.HookPoint, sourceHook SourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sourceAfterSelectHooks = append(sourceAfterSelectHooks, sourceHook)
	case boil.BeforeInsertHook:
		sourceBeforeInsertHooks = append(sourceBeforeInsertHooks, sourceHook)
	case boil.AfterInsertHook:
		sourceAfterInsertHooks = append(sourceAfterInsertHooks, sourceHook)
	case boil.BeforeUpdateHook:
		sourceBeforeUpdateHooks = append(sourceBeforeUpdateHooks, sourceHook)
	case boil.AfterUpdateHook:
		sourceAfterUpdateHooks = append(sourceAfterUpdateHooks, sourceHook)
	case boil.BeforeDeleteHook:
		sourceBeforeDeleteHooks = append(sourceBeforeDeleteHooks, sourceHook)
	case boil.AfterDeleteHook:
		sourceAfterDeleteHooks = append(sourceAfterDeleteHooks, sourceHook)
	case boil.BeforeUpsertHook:
		sourceBeforeUpsertHooks = append(sourceBeforeUpsertHooks, sourceHook)
	case boil.AfterUpsertHook:
		sourceAfterUpsertHooks = append(sourceAfterUpsertHooks, sourceHook)
	}
}

// One returns a single source record from the query.
func (q sourceQuery) One(exec boil.Executor) (*Source, error) {
	o := &Source{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sources")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Source records from the query.
func (q sourceQuery) All(exec boil.Executor) (SourceSlice, error) {
	var o []*Source

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Source slice")
	}

	if len(sourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Source records in the query.
func (q sourceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sources rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sourceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sources exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *Source) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	query := Groups(queryMods...)
	queries.SetFrom(query.Query, "\"groups\"")

	return query
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sourceL) LoadGroup(e boil.Executor, singular bool, maybeSource interface{}, mods queries.Applicator) error {
	var slice []*Source
	var object *Source

	if singular {
		object = maybeSource.(*Source)
	} else {
		slice = *maybeSource.(*[]*Source)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sourceR{}
		}
		if !queries.IsNil(object.GroupID) {
			args = append(args, object.GroupID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sourceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GroupID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GroupID) {
				args = append(args, obj.GroupID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`groups`),
		qm.WhereIn(`groups.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for groups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for groups")
	}

	if len(sourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.Sources = append(foreign.R.Sources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GroupID, foreign.ID) {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.Sources = append(foreign.R.Sources, local)
				break
			}
		}
	}

	return nil
}

// SetGroup of the source to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.Sources.
func (o *Source) SetGroup(exec boil.Executor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"group_id"}),
		strmangle.WhereClause("\"", "\"", 2, sourcePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GroupID, related.ID)
	if o.R == nil {
		o.R = &sourceR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			Sources: SourceSlice{o},
		}
	} else {
		related.R.Sources = append(related.R.Sources, o)
	}

	return nil
}

// RemoveGroup relationship.
// Sets o.R.Group to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Source) RemoveGroup(exec boil.Executor, related *Group) error {
	var err error

	queries.SetScanner(&o.GroupID, nil)
	if _, err = o.Update(exec, boil.Whitelist("group_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Group = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Sources {
		if queries.Equal(o.GroupID, ri.GroupID) {
			continue
		}

		ln := len(related.R.Sources)
		if ln > 1 && i < ln-1 {
			related.R.Sources[i] = related.R.Sources[ln-1]
		}
		related.R.Sources = related.R.Sources[:ln-1]
		break
	}
	return nil
}

// Sources retrieves all the records using an executor.
func Sources(mods ...qm.QueryMod) sourceQuery {
	mods = append(mods, qm.From("\"sources\""))
	return sourceQuery{NewQuery(mods...)}
}

// FindSource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSource(exec boil.Executor, iD int, selectCols ...string) (*Source, error) {
	sourceObj := &Source{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sources\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, sourceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sources")
	}

	if err = sourceObj.doAfterSelectHooks(exec); err != nil {
		return sourceObj, err
	}

	return sourceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Source) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sources provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sourceInsertCacheMut.RLock()
	cache, cached := sourceInsertCache[key]
	sourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sourceAllColumns,
			sourceColumnsWithDefault,
			sourceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sourceType, sourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sources\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sources\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sources")
	}

	if !cached {
		sourceInsertCacheMut.Lock()
		sourceInsertCache[key] = cache
		sourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Source.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Source) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sourceUpdateCacheMut.RLock()
	cache, cached := sourceUpdateCache[key]
	sourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sourceAllColumns,
			sourcePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sources\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, append(wl, sourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sources")
	}

	if !cached {
		sourceUpdateCacheMut.Lock()
		sourceUpdateCache[key] = cache
		sourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sourceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sources")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SourceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sourcePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in source slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all source")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Source) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sources provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sourceUpsertCacheMut.RLock()
	cache, cached := sourceUpsertCache[key]
	sourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sourceAllColumns,
			sourceColumnsWithDefault,
			sourceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sourceAllColumns,
			sourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sources, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sourcePrimaryKeyColumns))
			copy(conflict, sourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sources\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sourceType, sourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sourceType, sourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sources")
	}

	if !cached {
		sourceUpsertCacheMut.Lock()
		sourceUpsertCache[key] = cache
		sourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Source record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Source) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Source provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sourcePrimaryKeyMapping)
	sql := "DELETE FROM \"sources\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sources")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sourceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sources")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SourceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sourcePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from source slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sources")
	}

	if len(sourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Source) Reload(exec boil.Executor) error {
	ret, err := FindSource(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SourceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sources\".* FROM \"sources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SourceSlice")
	}

	*o = slice

	return nil
}

// SourceExists checks if the Source row exists.
func SourceExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sources\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sources exists")
	}

	return exists, nil
}
