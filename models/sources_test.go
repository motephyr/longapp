// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSources(t *testing.T) {
	t.Parallel()

	query := Sources()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSourcesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSourcesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sources().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSourcesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SourceSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSourcesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SourceExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Source exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SourceExists to return true, but got false.")
	}
}

func testSourcesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sourceFound, err := FindSource(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sourceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSourcesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sources().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSourcesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sources().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSourcesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sourceOne := &Source{}
	sourceTwo := &Source{}
	if err = randomize.Struct(seed, sourceOne, sourceDBTypes, false, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}
	if err = randomize.Struct(seed, sourceTwo, sourceDBTypes, false, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = sourceOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sourceTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sources().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSourcesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sourceOne := &Source{}
	sourceTwo := &Source{}
	if err = randomize.Struct(seed, sourceOne, sourceDBTypes, false, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}
	if err = randomize.Struct(seed, sourceTwo, sourceDBTypes, false, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = sourceOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sourceTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sourceBeforeInsertHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceAfterInsertHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceAfterSelectHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceBeforeUpdateHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceAfterUpdateHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceBeforeDeleteHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceAfterDeleteHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceBeforeUpsertHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func sourceAfterUpsertHook(e boil.Executor, o *Source) error {
	*o = Source{}
	return nil
}

func testSourcesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Source{}
	o := &Source{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sourceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Source object: %s", err)
	}

	AddSourceHook(boil.BeforeInsertHook, sourceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sourceBeforeInsertHooks = []SourceHook{}

	AddSourceHook(boil.AfterInsertHook, sourceAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sourceAfterInsertHooks = []SourceHook{}

	AddSourceHook(boil.AfterSelectHook, sourceAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sourceAfterSelectHooks = []SourceHook{}

	AddSourceHook(boil.BeforeUpdateHook, sourceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sourceBeforeUpdateHooks = []SourceHook{}

	AddSourceHook(boil.AfterUpdateHook, sourceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sourceAfterUpdateHooks = []SourceHook{}

	AddSourceHook(boil.BeforeDeleteHook, sourceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sourceBeforeDeleteHooks = []SourceHook{}

	AddSourceHook(boil.AfterDeleteHook, sourceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sourceAfterDeleteHooks = []SourceHook{}

	AddSourceHook(boil.BeforeUpsertHook, sourceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sourceBeforeUpsertHooks = []SourceHook{}

	AddSourceHook(boil.AfterUpsertHook, sourceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sourceAfterUpsertHooks = []SourceHook{}
}

func testSourcesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSourcesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(sourceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSourceToOneGroupUsingGroup(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Source
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GroupID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SourceSlice{&local}
	if err = local.L.LoadGroup(tx, false, (*[]*Source)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSourceToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Source
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sourceDBTypes, false, strmangle.SetComplement(sourcePrimaryKeyColumns, sourceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sources[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}

func testSourceToOneRemoveOpGroupUsingGroup(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Source
	var b Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sourceDBTypes, false, strmangle.SetComplement(sourcePrimaryKeyColumns, sourceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGroup(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGroup(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Group().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Group != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Sources) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSourcesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSourcesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SourceSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSourcesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sources().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sourceDBTypes = map[string]string{`ID`: `integer`, `Idstring`: `character varying`, `Timestring`: `character varying`, `Action`: `character varying`, `URL`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Datestring`: `character varying`, `Space`: `character varying`, `GroupID`: `integer`}
	_             = bytes.MinRead
)

func testSourcesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sourcePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sourceAllColumns) == len(sourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSourcesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sourceAllColumns) == len(sourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Source{}
	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sourceDBTypes, true, sourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sourceAllColumns, sourcePrimaryKeyColumns) {
		fields = sourceAllColumns
	} else {
		fields = strmangle.SetComplement(
			sourceAllColumns,
			sourcePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SourceSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSourcesUpsert(t *testing.T) {
	t.Parallel()

	if len(sourceAllColumns) == len(sourcePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Source{}
	if err = randomize.Struct(seed, &o, sourceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Source: %s", err)
	}

	count, err := Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sourceDBTypes, false, sourcePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Source struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Source: %s", err)
	}

	count, err = Sources().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
