// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserIdstring is an object representing the database table.
type UserIdstring struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.Int    `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Idstring  null.String `boil:"idstring" json:"idstring,omitempty" toml:"idstring" yaml:"idstring,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userIdstringR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userIdstringL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserIdstringColumns = struct {
	ID        string
	UserID    string
	Idstring  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Idstring:  "idstring",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var UserIdstringTableColumns = struct {
	ID        string
	UserID    string
	Idstring  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "user_idstrings.id",
	UserID:    "user_idstrings.user_id",
	Idstring:  "user_idstrings.idstring",
	CreatedAt: "user_idstrings.created_at",
	UpdatedAt: "user_idstrings.updated_at",
}

// Generated where

var UserIdstringWhere = struct {
	ID        whereHelperint
	UserID    whereHelpernull_Int
	Idstring  whereHelpernull_String
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"user_idstrings\".\"id\""},
	UserID:    whereHelpernull_Int{field: "\"user_idstrings\".\"user_id\""},
	Idstring:  whereHelpernull_String{field: "\"user_idstrings\".\"idstring\""},
	CreatedAt: whereHelpernull_Time{field: "\"user_idstrings\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"user_idstrings\".\"updated_at\""},
}

// UserIdstringRels is where relationship names are stored.
var UserIdstringRels = struct {
	User string
}{
	User: "User",
}

// userIdstringR is where relationships are stored.
type userIdstringR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userIdstringR) NewStruct() *userIdstringR {
	return &userIdstringR{}
}

// userIdstringL is where Load methods for each relationship are stored.
type userIdstringL struct{}

var (
	userIdstringAllColumns            = []string{"id", "user_id", "idstring", "created_at", "updated_at"}
	userIdstringColumnsWithoutDefault = []string{}
	userIdstringColumnsWithDefault    = []string{"id", "user_id", "idstring", "created_at", "updated_at"}
	userIdstringPrimaryKeyColumns     = []string{"id"}
	userIdstringGeneratedColumns      = []string{}
)

type (
	// UserIdstringSlice is an alias for a slice of pointers to UserIdstring.
	// This should almost always be used instead of []UserIdstring.
	UserIdstringSlice []*UserIdstring
	// UserIdstringHook is the signature for custom UserIdstring hook methods
	UserIdstringHook func(boil.Executor, *UserIdstring) error

	userIdstringQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userIdstringType                 = reflect.TypeOf(&UserIdstring{})
	userIdstringMapping              = queries.MakeStructMapping(userIdstringType)
	userIdstringPrimaryKeyMapping, _ = queries.BindMapping(userIdstringType, userIdstringMapping, userIdstringPrimaryKeyColumns)
	userIdstringInsertCacheMut       sync.RWMutex
	userIdstringInsertCache          = make(map[string]insertCache)
	userIdstringUpdateCacheMut       sync.RWMutex
	userIdstringUpdateCache          = make(map[string]updateCache)
	userIdstringUpsertCacheMut       sync.RWMutex
	userIdstringUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userIdstringAfterSelectHooks []UserIdstringHook

var userIdstringBeforeInsertHooks []UserIdstringHook
var userIdstringAfterInsertHooks []UserIdstringHook

var userIdstringBeforeUpdateHooks []UserIdstringHook
var userIdstringAfterUpdateHooks []UserIdstringHook

var userIdstringBeforeDeleteHooks []UserIdstringHook
var userIdstringAfterDeleteHooks []UserIdstringHook

var userIdstringBeforeUpsertHooks []UserIdstringHook
var userIdstringAfterUpsertHooks []UserIdstringHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserIdstring) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserIdstring) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserIdstring) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserIdstring) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserIdstring) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserIdstring) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserIdstring) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserIdstring) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserIdstring) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userIdstringAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserIdstringHook registers your hook function for all future operations.
func AddUserIdstringHook(hookPoint boil.HookPoint, userIdstringHook UserIdstringHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userIdstringAfterSelectHooks = append(userIdstringAfterSelectHooks, userIdstringHook)
	case boil.BeforeInsertHook:
		userIdstringBeforeInsertHooks = append(userIdstringBeforeInsertHooks, userIdstringHook)
	case boil.AfterInsertHook:
		userIdstringAfterInsertHooks = append(userIdstringAfterInsertHooks, userIdstringHook)
	case boil.BeforeUpdateHook:
		userIdstringBeforeUpdateHooks = append(userIdstringBeforeUpdateHooks, userIdstringHook)
	case boil.AfterUpdateHook:
		userIdstringAfterUpdateHooks = append(userIdstringAfterUpdateHooks, userIdstringHook)
	case boil.BeforeDeleteHook:
		userIdstringBeforeDeleteHooks = append(userIdstringBeforeDeleteHooks, userIdstringHook)
	case boil.AfterDeleteHook:
		userIdstringAfterDeleteHooks = append(userIdstringAfterDeleteHooks, userIdstringHook)
	case boil.BeforeUpsertHook:
		userIdstringBeforeUpsertHooks = append(userIdstringBeforeUpsertHooks, userIdstringHook)
	case boil.AfterUpsertHook:
		userIdstringAfterUpsertHooks = append(userIdstringAfterUpsertHooks, userIdstringHook)
	}
}

// OneG returns a single userIdstring record from the query using the global executor.
func (q userIdstringQuery) OneG() (*UserIdstring, error) {
	return q.One(boil.GetDB())
}

// One returns a single userIdstring record from the query.
func (q userIdstringQuery) One(exec boil.Executor) (*UserIdstring, error) {
	o := &UserIdstring{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_idstrings")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserIdstring records from the query using the global executor.
func (q userIdstringQuery) AllG() (UserIdstringSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserIdstring records from the query.
func (q userIdstringQuery) All(exec boil.Executor) (UserIdstringSlice, error) {
	var o []*UserIdstring

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserIdstring slice")
	}

	if len(userIdstringAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserIdstring records in the query, and panics on error.
func (q userIdstringQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserIdstring records in the query.
func (q userIdstringQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_idstrings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userIdstringQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userIdstringQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_idstrings exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserIdstring) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userIdstringL) LoadUser(e boil.Executor, singular bool, maybeUserIdstring interface{}, mods queries.Applicator) error {
	var slice []*UserIdstring
	var object *UserIdstring

	if singular {
		object = maybeUserIdstring.(*UserIdstring)
	} else {
		slice = *maybeUserIdstring.(*[]*UserIdstring)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userIdstringR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userIdstringR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userIdstringAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserIdstrings = append(foreign.R.UserIdstrings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserIdstrings = append(foreign.R.UserIdstrings, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the userIdstring to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserIdstrings.
// Uses the global database handle.
func (o *UserIdstring) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userIdstring to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserIdstrings.
func (o *UserIdstring) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_idstrings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userIdstringPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &userIdstringR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserIdstrings: UserIdstringSlice{o},
		}
	} else {
		related.R.UserIdstrings = append(related.R.UserIdstrings, o)
	}

	return nil
}

// RemoveUserG relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *UserIdstring) RemoveUserG(related *User) error {
	return o.RemoveUser(boil.GetDB(), related)
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserIdstring) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserIdstrings {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UserIdstrings)
		if ln > 1 && i < ln-1 {
			related.R.UserIdstrings[i] = related.R.UserIdstrings[ln-1]
		}
		related.R.UserIdstrings = related.R.UserIdstrings[:ln-1]
		break
	}
	return nil
}

// UserIdstrings retrieves all the records using an executor.
func UserIdstrings(mods ...qm.QueryMod) userIdstringQuery {
	mods = append(mods, qm.From("\"user_idstrings\""))
	return userIdstringQuery{NewQuery(mods...)}
}

// FindUserIdstringG retrieves a single record by ID.
func FindUserIdstringG(iD int, selectCols ...string) (*UserIdstring, error) {
	return FindUserIdstring(boil.GetDB(), iD, selectCols...)
}

// FindUserIdstring retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserIdstring(exec boil.Executor, iD int, selectCols ...string) (*UserIdstring, error) {
	userIdstringObj := &UserIdstring{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_idstrings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userIdstringObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_idstrings")
	}

	if err = userIdstringObj.doAfterSelectHooks(exec); err != nil {
		return userIdstringObj, err
	}

	return userIdstringObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserIdstring) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserIdstring) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_idstrings provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userIdstringColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userIdstringInsertCacheMut.RLock()
	cache, cached := userIdstringInsertCache[key]
	userIdstringInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userIdstringAllColumns,
			userIdstringColumnsWithDefault,
			userIdstringColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userIdstringType, userIdstringMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userIdstringType, userIdstringMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_idstrings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_idstrings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_idstrings")
	}

	if !cached {
		userIdstringInsertCacheMut.Lock()
		userIdstringInsertCache[key] = cache
		userIdstringInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserIdstring record using the global executor.
// See Update for more documentation.
func (o *UserIdstring) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserIdstring.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserIdstring) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userIdstringUpdateCacheMut.RLock()
	cache, cached := userIdstringUpdateCache[key]
	userIdstringUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userIdstringAllColumns,
			userIdstringPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_idstrings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_idstrings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userIdstringPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userIdstringType, userIdstringMapping, append(wl, userIdstringPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_idstrings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_idstrings")
	}

	if !cached {
		userIdstringUpdateCacheMut.Lock()
		userIdstringUpdateCache[key] = cache
		userIdstringUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userIdstringQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userIdstringQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_idstrings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_idstrings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserIdstringSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserIdstringSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIdstringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_idstrings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userIdstringPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userIdstring slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userIdstring")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserIdstring) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserIdstring) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_idstrings provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userIdstringColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userIdstringUpsertCacheMut.RLock()
	cache, cached := userIdstringUpsertCache[key]
	userIdstringUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userIdstringAllColumns,
			userIdstringColumnsWithDefault,
			userIdstringColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userIdstringAllColumns,
			userIdstringPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_idstrings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userIdstringPrimaryKeyColumns))
			copy(conflict, userIdstringPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_idstrings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userIdstringType, userIdstringMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userIdstringType, userIdstringMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_idstrings")
	}

	if !cached {
		userIdstringUpsertCacheMut.Lock()
		userIdstringUpsertCache[key] = cache
		userIdstringUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserIdstring record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserIdstring) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserIdstring record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserIdstring) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserIdstring provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userIdstringPrimaryKeyMapping)
	sql := "DELETE FROM \"user_idstrings\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_idstrings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_idstrings")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userIdstringQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q userIdstringQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userIdstringQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_idstrings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_idstrings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserIdstringSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserIdstringSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userIdstringBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIdstringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_idstrings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userIdstringPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userIdstring slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_idstrings")
	}

	if len(userIdstringAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserIdstring) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserIdstring provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserIdstring) Reload(exec boil.Executor) error {
	ret, err := FindUserIdstring(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserIdstringSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserIdstringSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserIdstringSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserIdstringSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userIdstringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_idstrings\".* FROM \"user_idstrings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userIdstringPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserIdstringSlice")
	}

	*o = slice

	return nil
}

// UserIdstringExistsG checks if the UserIdstring row exists.
func UserIdstringExistsG(iD int) (bool, error) {
	return UserIdstringExists(boil.GetDB(), iD)
}

// UserIdstringExists checks if the UserIdstring row exists.
func UserIdstringExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_idstrings\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_idstrings exists")
	}

	return exists, nil
}
