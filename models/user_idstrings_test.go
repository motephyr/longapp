// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserIdstrings(t *testing.T) {
	t.Parallel()

	query := UserIdstrings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserIdstringsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIdstringsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserIdstrings().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIdstringsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIdstringSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIdstringsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserIdstringExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserIdstring exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserIdstringExists to return true, but got false.")
	}
}

func testUserIdstringsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userIdstringFound, err := FindUserIdstring(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userIdstringFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserIdstringsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserIdstrings().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserIdstringsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserIdstrings().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserIdstringsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userIdstringOne := &UserIdstring{}
	userIdstringTwo := &UserIdstring{}
	if err = randomize.Struct(seed, userIdstringOne, userIdstringDBTypes, false, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}
	if err = randomize.Struct(seed, userIdstringTwo, userIdstringDBTypes, false, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userIdstringOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIdstringTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIdstrings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserIdstringsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userIdstringOne := &UserIdstring{}
	userIdstringTwo := &UserIdstring{}
	if err = randomize.Struct(seed, userIdstringOne, userIdstringDBTypes, false, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}
	if err = randomize.Struct(seed, userIdstringTwo, userIdstringDBTypes, false, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = userIdstringOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIdstringTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userIdstringBeforeInsertHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringAfterInsertHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringAfterSelectHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringBeforeUpdateHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringAfterUpdateHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringBeforeDeleteHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringAfterDeleteHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringBeforeUpsertHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func userIdstringAfterUpsertHook(e boil.Executor, o *UserIdstring) error {
	*o = UserIdstring{}
	return nil
}

func testUserIdstringsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserIdstring{}
	o := &UserIdstring{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userIdstringDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserIdstring object: %s", err)
	}

	AddUserIdstringHook(boil.BeforeInsertHook, userIdstringBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userIdstringBeforeInsertHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.AfterInsertHook, userIdstringAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userIdstringAfterInsertHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.AfterSelectHook, userIdstringAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userIdstringAfterSelectHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.BeforeUpdateHook, userIdstringBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userIdstringBeforeUpdateHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.AfterUpdateHook, userIdstringAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userIdstringAfterUpdateHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.BeforeDeleteHook, userIdstringBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userIdstringBeforeDeleteHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.AfterDeleteHook, userIdstringAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userIdstringAfterDeleteHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.BeforeUpsertHook, userIdstringBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userIdstringBeforeUpsertHooks = []UserIdstringHook{}

	AddUserIdstringHook(boil.AfterUpsertHook, userIdstringAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userIdstringAfterUpsertHooks = []UserIdstringHook{}
}

func testUserIdstringsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIdstringsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(userIdstringColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIdstringToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local UserIdstring
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserIdstringSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserIdstring)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserIdstringToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserIdstring
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIdstringDBTypes, false, strmangle.SetComplement(userIdstringPrimaryKeyColumns, userIdstringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIdstrings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserIdstringToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a UserIdstring
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIdstringDBTypes, false, strmangle.SetComplement(userIdstringPrimaryKeyColumns, userIdstringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UserIdstrings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testUserIdstringsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserIdstringsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIdstringSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testUserIdstringsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIdstrings().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userIdstringDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `Idstring`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testUserIdstringsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userIdstringPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userIdstringAllColumns) == len(userIdstringPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserIdstringsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userIdstringAllColumns) == len(userIdstringPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIdstring{}
	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIdstringDBTypes, true, userIdstringPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userIdstringAllColumns, userIdstringPrimaryKeyColumns) {
		fields = userIdstringAllColumns
	} else {
		fields = strmangle.SetComplement(
			userIdstringAllColumns,
			userIdstringPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserIdstringSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserIdstringsUpsert(t *testing.T) {
	t.Parallel()

	if len(userIdstringAllColumns) == len(userIdstringPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserIdstring{}
	if err = randomize.Struct(seed, &o, userIdstringDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIdstring: %s", err)
	}

	count, err := UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userIdstringDBTypes, false, userIdstringPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIdstring struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIdstring: %s", err)
	}

	count, err = UserIdstrings().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
